import threading
import random
import time

class Bank:
    def __init__(self,balance,lock=threading.Lock()):
        self.balance=balance
        self.lock=lock

    def deposit(self):
        for i in range(100):
            plus = random.randint(50, 500)
            self.balance += plus
            print(f'Пополнение: {plus}. Баланс:{self.balance}.')
            if self.balance >= 500 and self.lock.locked()==True:
                self.lock.release()
            time.sleep(0.001)



    def take(self):
        i=0
        while i<100:
            minus=random.randint(50,500)
            print(f'Запрос на {minus}')
            if minus<=self.balance:
                self.balance-=minus
                i+=1
                print(f'Снятие: {minus}. Баланс: {self.balance}')
            else:
                print(f'Запрос отклонён, недостаточно средств')
                self.lock.acquire()



bk = Bank(0)
th1 = threading.Thread(target=Bank.deposit, args=(bk,))
th2 = threading.Thread(target=Bank.take, args=(bk,))
th1.start()
th2.start()
th1.join()
th2.join()

print(f'Итоговый баланс: {bk.balance}')
